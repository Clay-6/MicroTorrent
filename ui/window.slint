import { HorizontalBox,
         Button,
         ListView,
         VerticalBox,
         Palette,
         ProgressIndicator,
         GroupBox,
         TabWidget,
         LineEdit
        } from "std-widgets.slint";

export struct TorrentInfo {
    ses_id: int,
    name: string,
    progress: float,
}

component AddPopup {
    public function show() {
        pw.show();
    }
    callback add_pressed(string, string);
    min-width: 350px;
    pw := PopupWindow {
//        width: parent.width;
//        height: parent.height;

        x: 0px;
        y: 0px;
        close-policy: PopupClosePolicy.close-on-click-outside;
        Rectangle {
            width: 100%;
            height: 100%;
            background: Palette.background;
            border-radius: 1rem;
            border-color: Palette.border;
            border-width: 2px;
        }

        VerticalBox {
            uri := LineEdit {
                placeholder-text: "Torrent file path or magnet link";
            }

            save_path := LineEdit {
                placeholder-text: "Save path";
            }

            HorizontalBox {
                Button {
                    accessible-role: button;
                    accessible-label: "Add torrent";
                    text: "Add";
                    clicked => {
                        add_pressed(uri.text, save_path.text);
                    }
                }

                Button {
                    accessible-role: button;
                    accessible-label: "Close error popup";
                    text: "Close";
                    clicked => {
                        pw.close();
                    }
                }
            }
        }
    }
}

component ErrorPopup {
    public function show(err_text: string) {
        error_message = err_text;
        err_popup.show();
    }

    property <string> error_message;

    err_popup := PopupWindow {
        close-policy: PopupClosePolicy.no-auto-close;
        Rectangle {
            width: 100%;
            height: 100%;
            background: Palette.alternate-background;
            border-radius: 1rem;
            border-color: Palette.border;
            border-width: 2px;
        }

        VerticalBox {
            Text {
                text: "An error has occured!";
                horizontal-alignment: center;
                font-weight: 800;
            }

            Text {
                text: error_message;
            }

            Button {
                text: "Ok";
                clicked => {
                    err_popup.close();
                }
            }
        }
    }
}

export component MainWindow inherits Window {
    title: "MicroTorrent";

    min-height: 450px;
    min-width: 400px;
    in property <[TorrentInfo]> torrents <=> torrent-list.info;
    in property <[string]> peers <=> peers-list.peers;
    in property <string> error_message;
    in-out property <[string]> blocked_peers <=> blocked-list.blacklist;
    // args are uri, save path
    callback add_torrent(string, string);
    callback create_torrent(string, string, string);
    callback remove_torrent(int);
    callback show_error(string);
    callback block_ip(string);
    callback unblock_ip(string);
    show_error(msg) => {
        err_popup.show(msg);
    }
    add_popup := AddPopup {
        width: parent.width;
        x: 0;
        y: self.height / 2;
        add_pressed(uri, path) => {
            if (uri != "") {
                add_torrent(uri, path);
            }
        }
    }

    err_popup := ErrorPopup {
        x: 0px;
        y: 0px;
    }

    TabWidget {
        Tab {
            title: "Torrents";
            VerticalBox {
                HorizontalBox {
                    Button {
                        text: "Add Torrent";
                        clicked => {
                            add_popup.show();
                        }
                    }
                }

                GroupBox {
                    title: "Torrents";
                    preferred-height: 70% * root.height;
                    torrent-list := ListView {
                        property <[TorrentInfo]> info;
                        for torrent in info: Rectangle {
                            border-width: 1px;
                            border-color: grey;
                            height: 20px;
                            width: parent.width;
                            HorizontalLayout {
                                padding: 3px;
                                // Torrent name
                                Text {
                                    text: torrent.name;
                                    width: parent.width / 3 - 5px;
                                    overflow: elide;
                                }

                                // Torrent progress
                                ProgressIndicator {
                                    accessible-placeholder-text: "Downloaded \{torrent.progress}%";
                                    progress: torrent.progress;
                                    height: parent.height - 3px;
                                    width: parent.width / 3;
                                }

                                // Remove Button
                                Rectangle {
                                    border-width: 3px;
                                    border-color: Palette.border;
                                    background: red;
                                    border-radius: 0.25rem;
                                    width: parent.width / 3;
                                    height: parent.height - 3px;
                                    TouchArea {
                                        clicked => {
                                            remove_torrent(torrent.ses-id);
                                        }
                                    }

                                    Text {
                                        text: "Remove";
                                        horizontal-alignment: center;
                                        vertical-alignment: center;
                                    }
                                }
                            }
                        }
                    }
                }

                GroupBox {
                    title: "Connected peers (\{peers.length})";
                    height: 30% * root.height;
                    peers-list := ListView {
                        property <[string]> peers;
                        for peer in peers: Rectangle {
                            border-width: 1px;
                            border-color: grey;
                            height: 20px;
                            width: parent.width;
                            Text {
                                x: 3px;
                                text: peer;
                            }
                        }
                    }
                }
            }
        }

        Tab {
            title: "Options";

            VerticalBox {
                GroupBox {
                    title: "Blocked peers (\{blocked-list.blacklist.length})";
                    preferred-height: 70% * root.height;
                    VerticalBox {
                        blocked-list := ListView {
                            property <[string]> blacklist: ["1", "2", "3"];
                            for peer in blacklist: Rectangle {
                                border-width: 1px;
                                border-color: grey;
                                height: 20px;
                                width: parent.width;
                                Text {
                                    x: 3px;
                                    text: peer;
                                }

                                // Remove Button
                                Rectangle {
                                    border-width: 3px;
                                    border-color: Palette.border;
                                    background: red;
                                    border-radius: 0.25rem;
                                    width: parent.width / 3;
                                    height: parent.height - 3px;
                                    TouchArea {
                                        clicked => {
                                            unblock_ip(peer);
                                        }
                                    }

                                    Text {
                                        text: "Unblock";
                                        horizontal-alignment: center;
                                        vertical-alignment: center;
                                    }
                                }
                            }
                        }

                        Text {
                            text: "Block an IP address:";
                            font-weight: 700;
                        }

                        new_block := LineEdit {
                            accessible-role: text-input;
                            placeholder-text: "127.0.0.1";
                            accepted => {
                                if (new_block.text != "") {
                                    block_ip(new_block.text);
                                }
                            }
                        }
                    }
                }

                GroupBox {
                    title: "Create a torrent";

                    VerticalBox {
                        path := LineEdit {
                            placeholder-text: "Path to file/folder";
                        }

                        save_to := LineEdit {
                            placeholder-text: "Path to save torrent file to";
                        }

                        tracker := LineEdit {
                            placeholder-text: "(Optional) Tracker URL";
                        }

                        Button {
                            text: "Create";
                            padding-bottom: 3px;
                            clicked => {
                                if (path.text != "") {
                                    create_torrent(path.text, save_to.text, tracker.text);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
