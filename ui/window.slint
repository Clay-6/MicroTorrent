import { HorizontalBox, Button, ListView, VerticalBox,Palette, ProgressIndicator, GroupBox, TabWidget, LineEdit } from "std-widgets.slint";

export struct TorrentInfo {
    ses_id: int,
    name: string,
    total_bytes: int,
    downloaded_bytes: int,
}

component AddPopup {
    public function show() {
        pw.show();
    }
    callback add_pressed(string, string);
    min-width: 350px;
    pw := PopupWindow {
//        width: parent.width;
//        height: parent.height;

        x: 0px;
        y: 0px;
        close-on-click: false;
        Rectangle {
            width: 100%;
            height: 100%;
            background: Palette.background;
            border-radius: 1rem;
            border-color: Palette.border;
            border-width: 2px;
        }

        VerticalBox {
            uri := LineEdit {
                placeholder-text: "Torrent file path or magnet link";
            }

            save_path := LineEdit {
                placeholder-text: "Save path";
            }

            HorizontalBox {
                Button {
                    accessible-role: button;
                    accessible-label: "Add torrent";
                    text: "Add";
                    clicked => {
                        add_pressed(uri.text, save_path.text);
                    }
                }

                Button {
                    accessible-role: button;
                    accessible-label: "Close error popup";
                    text: "Close";
                    clicked => {
                        pw.close();
                    }
                }
            }
        }
    }
}

export component MainWindow inherits Window {
    min-height: 350px;
    min-width: 400px;
    title: "MicroTorrent";
    in property <[TorrentInfo]> torrents <=> torrent-list.info;
    in property <[string]> peers <=> peers-list.peers;
    in property <string> error_message;
    // args are uri, save path
    callback add_torrent(string, string);
    callback remove_torrent(int);
    callback show_error;
    show_error => {
        err_popup.show();
    }
    add_popup := AddPopup {
        width: parent.width;
        x: 0;
        y: self.height / 2;
        add_pressed(uri, path) => {
            add_torrent(uri, path);
        }
    }

    err_popup := PopupWindow {
        x: 0px;
        y: 0px;
        close-on-click: false;
        Rectangle {
            width: 100%;
            height: 100%;
            background: Palette.alternate-background;
            border-radius: 1rem;
            border-color: Palette.border;
            border-width: 2px;
        }

        VerticalBox {
            Text {
                text: "An error has occured!";
            }

            Text {
                text: error_message;
            }

            Button {
                text: "Ok";
                clicked => {
                    err_popup.close();
                }
            }
        }
    }

    TabWidget {
        Tab {
            title: "Torrents";
            VerticalBox {
                HorizontalBox {
                    Button {
                        text: "Add Torrent";
                        clicked => {
                            add_popup.show();
                        }
                    }
                }

                GroupBox {
                    title: "Torrents";
                    torrent-list := ListView {
                        property <[TorrentInfo]> info;
                        max-height: 70% * root.height;
                        for torrent in info: Rectangle {
                            border-width: 1px;
                            border-color: grey;
                            height: 20px;
                            width: parent.width;

                            HorizontalLayout {
                                x: 3px;
                                // Torrent name
                                Text {

                                    text: torrent.name;
                                    width: parent.width / 3 - 5px;
                                    overflow: elide;
                                }

                                // Torrent progress
                                ProgressIndicator {
                                    accessible-placeholder-text: "Downloaded \{torrent.downloaded_bytes}/\{torrent.total_bytes} bytes";
                                    progress: torrent.downloaded_bytes / torrent.total_bytes;
                                    height: parent.height - 2px;
                                    width: parent.width / 3;
                                }

                                // Remove Button
                                Button {
                                    text: "Remove";
                                    width: parent.width / 3;
                                    height: parent.height - 2px;
                                    clicked => {
                                        remove_torrent(torrent.ses_id);
                                    }
                                }
                            }
                        }
                    }
                }

                GroupBox {
                    title: "Connected peers";
                    peers-list := ListView {
                        property <[string]> peers;
                        for peer in ["127.0.0.1", "127.0.0.2", "127.0.0.3"]: Rectangle {
                            border-width: 1px;
                            border-color: grey;
                            height: 20px;
                            width: parent.width;
                            Text {
                                x: 3px;
                                text: peer;
                            }
                        }
                    }
                }
            }
        }

        Tab {
            title: "Settings";
        }
    }
}
