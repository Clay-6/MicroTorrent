import { HorizontalBox,
         Button,
         ListView,
         VerticalBox,
         Palette,
         ProgressIndicator,
         GroupBox,
         TabWidget,
         LineEdit,
         ComboBox
        } from "std-widgets.slint";
import { AddPopup, ErrorPopup } from "popups.slint";

export struct TorrentInfo {
    ses_id: int,
    name: string,
    progress: float,
}

export component MainWindow inherits Window {
    title: "MicroTorrent";

    min-height: 500px;
    min-width: 400px;
    in property <[TorrentInfo]> torrents <=> torrent-list.info;
    in property <[string]> peers <=> peers-list.peers;
    in property <string> error_message;
    in-out property <[string]> blocked_peers <=> blocked-list.blacklist;
    // args are uri, save path
    callback add_torrent(string, string);
    callback create_torrent(string, string, string);
    callback remove_torrent(int);
    callback show_error(string);
    callback block_ip(string);
    callback unblock_ip(string);
    show_error(msg) => {
        err_popup.show(msg);
    }
    add_popup := AddPopup {
        width: parent.width;
        x: 0;
        y: self.height / 2;
        add_pressed(uri, path) => {
            if (uri != "") {
                add_torrent(uri, path);
            }
        }
    }

    err_popup := ErrorPopup {
        x: 0px;
        y: 0px;
    }

    TabWidget {
        Tab {
            title: "Torrents";
            VerticalBox {
                HorizontalBox {
                    Button {
                        text: "Add Torrent";
                        clicked => {
                            add_popup.show();
                        }
                    }
                }

                GroupBox {
                    title: "Torrents";
                    preferred-height: 70% * root.height;
                    torrent-list := ListView {
                        property <[TorrentInfo]> info;
                        for torrent in info: Rectangle {
                            border-width: 1px;
                            border-color: grey;
                            height: 20px;
                            width: parent.width;
                            HorizontalLayout {
                                padding: 3px;
                                // Torrent name
                                Text {
                                    text: torrent.name;
                                    width: parent.width / 3 - 5px;
                                    overflow: elide;
                                }

                                // Torrent progress
                                if torrent.progress < 1:
                                    ProgressIndicator {
                                        accessible-placeholder-text: "Downloaded \{torrent.progress}%";
                                        progress: torrent.progress;
                                        height: parent.height - 3px;
                                        width: parent.width / 3;
                                    }
                                if torrent.progress == 1:
                                    Rectangle {
                                        accessible-role: progress-indicator;
                                        accessible-placeholder-text: "Download complete";
                                        width: parent.width / 3;
                                        height: parent.height - 3px;
                                        background: green;
                                        border-radius: 0.25rem;
                                        Text {
                                            text: "Complete";
                                            horizontal-alignment: center;
                                            vertical-alignment: center;
                                        }
                                    }

                                // Remove Button
                                Rectangle {
                                    border-width: 3px;
                                    border-color: Palette.border;
                                    background: red;
                                    border-radius: 0.25rem;
                                    width: parent.width / 3;
                                    height: parent.height - 3px;
                                    TouchArea {
                                        clicked => {
                                            remove_torrent(torrent.ses-id);
                                        }
                                    }

                                    Text {
                                        text: "Remove";
                                        horizontal-alignment: center;
                                        vertical-alignment: center;
                                    }
                                }
                            }
                        }
                    }
                }

                GroupBox {
                    title: "Connected peers (\{peers.length})";
                    height: 30% * root.height;
                    peers-list := ListView {
                        property <[string]> peers;
                        for peer in peers: Rectangle {
                            border-width: 1px;
                            border-color: grey;
                            height: 20px;
                            width: parent.width;
                            Text {
                                x: 3px;
                                text: peer;
                            }
                        }
                    }
                }
            }
        }

        Tab {
            title: "Options";

            VerticalBox {
                HorizontalBox {
                    Text {
                        text: "Colour theme:";
                        vertical-alignment: center;
                    }

                    ComboBox {
                        model: ["dark", "light"];
                        current-value: Palette.color-scheme == ColorScheme.dark ? "dark" : "light";
                        current-index: Palette.color-scheme == ColorScheme.dark ? 0 : 1;

                        selected (val) => {
                            if (val == "dark") {
                                Palette.color-scheme = ColorScheme.dark;
                            } else {
                                Palette.color-scheme = ColorScheme.light;
                            }
                        }
                    }
                }

                GroupBox {
                    title: "Blocked IPs (\{blocked-list.blacklist.length})";
                    preferred-height: 70% * root.height;
                    VerticalBox {
                        blocked-list := ListView {
                            property <[string]> blacklist: ["1", "2", "3"];
                            for peer in blacklist: Rectangle {
                                border-width: 1px;
                                border-color: grey;
                                height: 20px;
                                width: parent.width;
                                Text {
                                    x: 3px;
                                    text: peer;
                                }

                                // Remove Button
                                Rectangle {
                                    border-width: 3px;
                                    border-color: Palette.border;
                                    background: red;
                                    border-radius: 0.25rem;
                                    width: parent.width / 3;
                                    height: parent.height - 3px;
                                    TouchArea {
                                        clicked => {
                                            unblock_ip(peer);
                                        }
                                    }

                                    Text {
                                        text: "Unblock";
                                        horizontal-alignment: center;
                                        vertical-alignment: center;
                                    }
                                }
                            }
                        }

                        Text {
                            text: "Block an IP address:";
                            font-weight: 700;
                        }

                        new_block := LineEdit {
                            accessible-role: text-input;
                            placeholder-text: "127.0.0.1";
                            accepted => {
                                if (new_block.text != "") {
                                    block_ip(new_block.text);
                                }
                            }
                        }
                    }
                }

                GroupBox {
                    title: "Create a torrent";

                    VerticalBox {
                        path := LineEdit {
                            placeholder-text: "Path to file/folder";
                        }

                        save_to := LineEdit {
                            placeholder-text: "Path to save torrent file to";
                        }

                        tracker := LineEdit {
                            placeholder-text: "(Optional) Tracker URL";
                        }

                        Button {
                            text: "Create";
                            padding-bottom: 3px;
                            clicked => {
                                if (path.text != "") {
                                    create_torrent(path.text, save_to.text, tracker.text);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
